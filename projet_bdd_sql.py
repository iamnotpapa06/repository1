"""Salut. Nous vous pr√©sentons notre code g√©n√©rant notre application de voyage "Horizons Voyage"
                                                                                                 """
""" Biblioth√®ques utilis√©es dans notre application Horizons Voyage
                                                                   """
import customtkinter as ctk
import pyodbc
from tkinter import ttk
import tkinter.messagebox as messagebox

""" Configuration de la connexion.
                                  """
server = 'DESKTOP-JEKMIAS\\SQLEXPRESS'
database = 'Voyage'

""" Chaine de connexion.
                        """
conn_str = (
    'DRIVER={ODBC Driver 17 for SQL Server};'
    'SERVER=' + server + ';'
    'DATABASE=' + database + ';'
    'Trusted_Connection=yes;'
    )


""" def connect_to_db():
    - √©tablit une connexion √† la base de donn√©es.
    - renvoie la connexion et le curseur si la connexion est r√©ussie, 
    sinon renvoie un message d'erreur.    
                                      """
def connect_to_db():
    try:
        conn = pyodbc.connect(conn_str)  # Essaye de se connecter √† la base de donn√©es
        cursor = conn.cursor()  # Cr√©e un curseur pour ex√©cuter des requ√™tes
        return conn, cursor  # Renvoie la connexion et le curseur
    except:
        return "Erreur de connexion √† la base de donn√©es."  # Message d'erreur si la connexion √©choue

""" def search_data():
    - recherche toutes les donn√©es dans la table Station
    - renvoie les lignes r√©cup√©r√©es ou un message d'erreur si la recherche √©choue.
                                                                                  """
def search_data():
    conn, cursor = connect_to_db()  # √âtablit une connexion √† la base de donn√©es
    if conn:  # V√©rifie si la connexion est r√©ussie
        try:
            cursor.execute("SELECT * FROM Station")  # Ex√©cute une requ√™te pour s√©lectionner toutes les stations
            rows = cursor.fetchall()  # R√©cup√®re toutes les lignes r√©sultantes
            return rows  # Renvoie les lignes
        except:
            return "Erreur lors de la recherche des donn√©es."  # Message d'erreur g√©n√©rique en cas d'√©chec
        finally:
            cursor.close()  # Ferme le curseur
            conn.close()  # Ferme la connexion
    return "Erreur de connexion."  # Message d'erreur si la connexion √©choue

""" def insert_data():
    - ins√®re une nouvelle station dans la table Station
    - renvoie un message de succ√®s ou d'erreur selon le r√©sultat de l'insertion.
                                                                                """
def insert_data(nom, capacite, lieu, region, tarif):
    conn, cursor = connect_to_db()  # √âtablit une connexion √† la base de donn√©es
    if conn:  # V√©rifie si la connexion est r√©ussie
        try:
            cursor.execute("""
                INSERT INTO Station (nomStation, capacit√©, lieu, r√©gion, tarif)
                VALUES (?, ?, ?, ?, ?)
            """, (nom, capacite, lieu, region, tarif))  # Ex√©cute une requ√™te d'insertion avec les donn√©es fournies
            conn.commit()  # Valide les changements
            return "Donn√©es ajout√©es avec succ√®s !"  # Message de succ√®s
        except:
            return "Erreur lors de l'insertion des donn√©es."  # Message d'erreur g√©n√©rique en cas d'√©chec
        finally:
            cursor.close()  # Ferme le curseur
            conn.close()  # Ferme la connexion
    return "Erreur de connexion."  # Message d'erreur si la connexion √©choue

""" def modify_data():
    - modifie les informations d'une station existante.
    - renvoie un message de succ√®s ou d'erreur selon le r√©sultat de la modification.
                                                                                    """
def modify_data(nomStation, nouveau_nom=None, nouvelle_capacite=None, nouveau_lieu=None, nouvelle_region=None, nouveau_tarif=None):
    conn, cursor = connect_to_db()  # √âtablit une connexion √† la base de donn√©es
    if conn:  # V√©rifie si la connexion est r√©ussie
        try:
            if nouveau_nom:  # Si un nouveau nom est fourni
                cursor.execute("UPDATE Station SET nomStation = ? WHERE nomStation = ?", (nouveau_nom, nomStation))
            if nouvelle_capacite:  # Si une nouvelle capacit√© est fournie
                cursor.execute("UPDATE Station SET capacit√© = ? WHERE nomStation = ?", (nouvelle_capacite, nomStation))
            if nouveau_lieu:  # Si un nouveau lieu est fourni
                cursor.execute("UPDATE Station SET lieu = ? WHERE nomStation = ?", (nouveau_lieu, nomStation))
            if nouvelle_region:  # Si une nouvelle r√©gion est fournie
                cursor.execute("UPDATE Station SET r√©gion = ? WHERE nomStation = ?", (nouvelle_region, nomStation))
            if nouveau_tarif:  # Si un nouveau tarif est fourni
                cursor.execute("UPDATE Station SET tarif = ? WHERE nomStation = ?", (nouveau_tarif, nomStation))
            conn.commit()  # Valide les changements
            return "Station modifi√©e avec succ√®s !"  # Message de succ√®s
        except:
            return "Erreur lors de la modification des donn√©es."  # Message d'erreur g√©n√©rique en cas d'√©chec
        finally:
            cursor.close()  # Ferme le curseur
            conn.close()  # Ferme la connexion
    return "Erreur de connexion."  # Message d'erreur si la connexion √©choue

""" 
    def delete_data():
    - supprime une station de la table Station
    - renvoie un message de succ√®s ou d'erreur selon le r√©sultat de la suppression.
                                                                                   """
def delete_data(nomStation):
    conn, cursor = connect_to_db()  # √âtablit une connexion √† la base de donn√©es
    if conn:  # V√©rifie si la connexion est r√©ussie
        try:
            cursor.execute("""
                DELETE FROM Station
                WHERE nomStation = ?
            """, (nomStation,))  # Ex√©cute une requ√™te de suppression pour la station sp√©cifi√©e
            conn.commit()  # Valide les changements
            return "Station supprim√©e avec succ√®s !"  # Message de succ√®s
        except:
            return "Erreur lors de la suppression des donn√©es."  # Message d'erreur g√©n√©rique en cas d'√©chec
        finally:
            cursor.close()  # Ferme le curseur
            conn.close()  # Ferme la connexion
    return "Erreur de connexion."  # Message d'erreur si la connexion √©choue

""" def update_treeview():
    - met √† jour le Treeview avec les donn√©es des stations.
    - efface les anciens √©l√©ments et ins√®re les nouveaux.
                                                             """
def update_treeview(tree):

    for item in tree.get_children():  # Supprime tous les √©l√©ments existants dans le Treeview
        tree.delete(item)
    rows = search_data()  # R√©cup√®re toutes les stations
    if isinstance(rows, str):  # V√©rifie si une erreur a √©t√© renvoy√©e
        return
    for row in rows:  # Pour chaque ligne r√©cup√©r√©e
        tree.insert("", "end", values=(row.nomStation, row.capacit√©, row.lieu, row.r√©gion, row.tarif))  # Ins√®re les donn√©es dans le Treeview



""" def show_info_messagebox () cr√©e une bo√Æte de message pour afficher des informations.
                                                             """
def show_info_messagebox(title, message):
    info_messagebox = ctk.CTkToplevel(app)  # Nouvelle fen√™tre pour le message
    info_messagebox.title(title)  # Titre de la fen√™tre
    
    # D√©finir la taille de la fen√™tre
    info_messagebox.geometry("400x300")

    # Ajouter un label pour le message, centrer le texte
    message_label = ctk.CTkLabel(info_messagebox, text=message, font=('Segoe UI', 20))
    message_label.pack(padx=20, pady=10, expand=True)  # Utiliser expand pour centrer verticalement

    # Ajouter un bouton pour fermer la fen√™tre
    close_button = ctk.CTkButton(info_messagebox, text="OK", command=info_messagebox.destroy, font=('Mistral', 40), fg_color="blue")
    close_button.pack(pady=20)  # Pady pour espacer le bouton


""" def show_contact_info() affiche les informations de contact selon l'option choisie.
                                                                                       """
def show_contact_info(option):
    # Si l'option est "phone", afficher le num√©ro de t√©l√©phone
    if option == "phone":
        show_info_messagebox("Contact", "Num√©ro de t√©l√©phone : +221 33 936 54 07")  # Affiche le num√©ro de t√©l√©phone
    
    # Si l'option est "about", afficher les informations sur l'application
    elif option == "about":
        app_info = (
            "Nom de l'application : Horizons Voyage\n"
            "Version : 1.0\n"
            "D√©velopp√© par :\n"
            "Moussa Niang üë®\n" 
            "Nogaye Ndiaye üë©‚Äçü¶±\n"
            "Mariama Foly Diallo üë©\n"
            "Papa Samba Niang üßë\n"
            "Cette application permet de g√©rer les informations sur les stations de voyage.\n"
            "Fonctionnalit√©s :\n"
            "- Ajouter, modifier, supprimer et rechercher des stations\n"
            "- Afficher la liste des stations enregistr√©es"
        )
        # Appeler la fonction pour afficher les informations sur l'application
        show_info_messagebox("√Ä propos", app_info)  # Affiche les informations sur l'application


""" def show_user_info() affiche les informations sur l'utilisateur s√©lectionn√©.
                                                                                 """
def show_user_info(user):
        # Dictionnaire contenant les informations des utilisateurs
        user_info = {
        "üë®": (
            "Nom: Moussa Niang\n"
            "Email: moussaniang@gmail.com\n"
            "R√¥le: Administrateur\n"
            "Exp√©rience: 5 ans dans la gestion de projets\n"
            "Responsabilit√©s: Supervise la gestion de l'application,\n"
            "assure la s√©curit√© des donn√©es et coordonne les √©quipes."
        ),
        "üë©‚Äçü¶±": (
            "Nom: Nogaye Ndiaye\n"
            "Email: nogayendiaye@gmail.com\n"
            "R√¥le: Gestionnaire\n"
            "Exp√©rience: 3 ans dans la gestion op√©rationnelle\n"
            "Responsabilit√©s: G√®re les op√©rations quotidiennes,\n"
            "s'assure de la satisfaction des utilisateurs et\n "
            "analyse les performances."
        ),
        "üë©": (
            "Nom: Mariama Foly Diallo\n"
            "Email: mariamafolydiallo@gmail.com\n"
            "R√¥le: Gestionnaire\n"
            "Exp√©rience: 4 ans dans la gestion de projets\n"
            "Responsabilit√©s: Coordonne les activit√©s de l'√©quipe,\n"
            "suit les indicateurs de performance et\n"
            "√©labore des rapports."
        ),
        "üßë": (
            "Nom: Papa Samba Niang\n"
            "Email: papasambaniang@gmail.com\n"
            "R√¥le: Employ√©\n"
            "Exp√©rience: 2 ans dans le service client\n"
            "Responsabilit√©s: Assiste les utilisateurs,\n"
            "et assure le support technique."
        )
    }
        # Affiche les informations sur l'utilisateur s√©lectionn√©
        show_info_messagebox("Personnel", user_info[user])  # Affiche les informations sur l'utilisateur


""" def create_contact_window() cr√©e une fen√™tre de contact avec des informations utiles.
                                                                                         """
def create_contact_window():
    # Cr√©ation d'une nouvelle fen√™tre de contact
    contact_window = ctk.CTkToplevel(app)  
    contact_window.geometry("800x600") # D√©finition de la taille de la fen√™tre

    # Frame pour les boutons en haut √† gauche
    button_frame = ctk.CTkFrame(contact_window)
    button_frame.pack(side="top", anchor="nw", padx=10, pady=10)

    # Boutons pour afficher les informations de contact
    ctk.CTkButton(button_frame, text="üîç", command=lambda: show_contact_info("about"), font=('Segoe UI', 45), width=30, text_color="yellow", fg_color="blue").pack(side="left", padx=5)
    ctk.CTkButton(button_frame, text="üìû", command=lambda: show_contact_info("phone"), font=('Segoe UI', 45), width=30, text_color="red", fg_color="blue").pack(side="left", padx=5)
    
    # Frame pour les ic√¥nes de l'application, positionn√©e en haut √† droite
    iconapp_frame = ctk.CTkFrame(contact_window)
    iconapp_frame.pack(side="top", anchor="ne", padx=10, pady=10)

    # Bouton pour revenir √† la fen√™tre principale
    ctk.CTkButton(iconapp_frame, text="üõ©Ô∏è", command=lambda: app.deiconify(), font=('Segoe UI', 45), width=30, text_color="blue", fg_color="white", anchor="ne").pack(side="right", padx=5)

    # Frame pour le titre de la fen√™tre
    title_frame = ctk.CTkFrame(contact_window)
    title_frame.pack(pady=20)

    # Titre de la fen√™tre
    ctk.CTkLabel(title_frame, text="Horizons Voyage", font=('Mistral', 60)).pack(pady=10)

    # Frame en bas √† gauche pour le copyright
    copyright_frame = ctk.CTkFrame(contact_window)
    copyright_frame.pack(side="bottom", anchor="sw", padx=10, pady=(5, 5))
    
    # Label pour afficher le texte du copyright
    copyright_label = ctk.CTkLabel(copyright_frame, text="¬© Octobre 2024.", font=('Segoe UI', 20))
    copyright_label.pack()

    # Frame en bas √† droite pour les ic√¥nes utilisateur
    user_icon_frame = ctk.CTkFrame(contact_window)
    user_icon_frame.pack(side="bottom", anchor="se", padx=10, pady=10)

    # Cr√©ation des boutons pour chaque utilisateur
    user_buttons = [
        ("üë®", "Moussa"),
        ("üë©‚Äçü¶±", "Nogaye"),
        ("üë©", "Mariama"),
        ("üßë", "Papa Samba")
    ]

    for icon, name in user_buttons:
        ctk.CTkButton(user_icon_frame, text=icon, command=lambda u=icon : show_user_info(u), font=('Segoe UI', 45), width=30, text_color="blue", fg_color="white").pack(side="left", padx=5)

""" Variables globales.
                       """
current_user = None
user_roles = {
    "Moussa": "Admin",
    "Nogaye": "Gestionnaire",
    "Mariama": "Gestionnaire",
    "Papa Samba": "Employ√©"
    }


""" def login_callback(): callback pour g√©rer la connexion de l'utilisateur.
                                                                            """
def login_callback():
    global current_user
    username = username_entry.get()  # R√©cup√®re le nom d'utilisateur
    
    if username in user_roles:
        current_user = username  # D√©finit l'utilisateur courant
        login_frame.destroy()  # Supprime le cadre de connexion
        create_widgets()  # Cr√©e les widgets principaux
    
    else:
        messagebox.showerror("Erreur", "Nom d'utilisateur non reconnu.")  # Affiche une erreur si l'utilisateur n'est pas reconnu


""" Cr√©ation de la fen√™tre principale
                                         """
app = ctk.CTk()  # Cr√©ation de la fen√™tre principale
app.geometry("800x600")  # D√©finition de la taille de la fen√™tre

# Cr√©ation d'un cadre pour l'√©cran de connexion
login_frame = ctk.CTkFrame(app)
login_frame.pack(pady=200)

# Cr√©ation d'un label pour le champ de saisie du nom d'utilisateur
ctk.CTkLabel(login_frame, text="Nom d'utilisateur :", font=('Segoe UI', 24)).grid(row=0, column=0, padx=10, pady=10)
username_entry = ctk.CTkEntry(login_frame, font=('Segoe UI', 24), width=200)
username_entry.grid(row=0, column=1)

# Cr√©ation d'un bouton pour se connecter
ctk.CTkButton(login_frame, text="Se connecter", font=('Mistral', 40), width=10, command=login_callback).grid(row=1, column=0, columnspan=2, pady=10)


""" def create_widgets() cr√©e les onglets principaux de l'application.
                                                                      """
def create_widgets():
    global info_frame, tree

    button_frame = ctk.CTkFrame(app)  # Cr√©ation d'un cadre pour les boutons
    button_frame.pack(side="top", fill="x", padx=10, pady=10)

    # Remplacement des ic√¥nes des boutons par les emojis sp√©cifi√©s selon l'utilisateur
    if current_user == "Moussa":
        user_icon = "üë®"
    elif current_user == "Nogaye":
        user_icon = "üë©‚Äçü¶±"
    elif current_user == "Mariama":
        user_icon = "üë©"
    elif current_user == "Papa Samba":
        user_icon = "üßë"

    # Cr√©ation du bouton pour l'utilisateur actuel
    ctk.CTkButton(button_frame, text=user_icon, command=None, font=('Segoe UI', 45), width=30, text_color="black", fg_color="white").pack(side="left", padx=5)

    # Cadre d'information pour le message de bienvenue
    info_frame = ctk.CTkFrame(app)
    info_frame.pack(pady=20)

    # Labels de bienvenue
    ctk.CTkLabel(info_frame, text=f"Bienvenue, {current_user}!", font=('Mistral', 60)).pack(pady=10)
    ctk.CTkLabel(info_frame, text="Bonne journ√©e !", font=('Mistral', 40), text_color="grey").pack(pady=10)

    create_manager_tabs()  # Cr√©ation des onglets pour le gestionnaire

    # Cadre pour afficher les stations
    display_frame = ctk.CTkFrame(app)
    display_frame.pack(side="right", fill="both", expand=True)

    # Label pour les stations disponibles
    stations_label = ctk.CTkLabel(display_frame, text="Stations disponibles", font=('Mistral', 40, 'bold'))
    stations_label.pack(pady=5)

    # Cr√©ation de la Treeview pour afficher les stations
    tree = ttk.Treeview(display_frame, columns=("Nom", "Capacit√©", "Lieu", "R√©gion", "Tarif"), show='headings')
    tree.heading("Nom", text="Nom")
    tree.heading("Capacit√©", text="Capacit√©")
    tree.heading("Lieu", text="Lieu")
    tree.heading("R√©gion", text="R√©gion")
    tree.heading("Tarif", text="Tarif")

    # Configuration des colonnes de la Treeview
    tree.column("Nom", width=150, anchor="w")
    tree.column("Capacit√©", width=100, anchor="w")
    tree.column("Lieu", width=150, anchor="w")
    tree.column("R√©gion", width=150, anchor="w")
    tree.column("Tarif", width=100, anchor="w")

    tree.pack(fill="both", expand=True)  # Ajout de la Treeview au cadre

    update_treeview(tree)  # Mise √† jour de la Treeview avec les donn√©es
    
    # Configuration du style pour la Treeview
    style = ttk.Style()
    style.configure("Treeview.Heading", font=('Helvetica', 14))
    style.configure("Treeview", font=('Helvetica', 13))

""" def show_custom_messagebox() cr√©e une bo√Æte de message personnalis√©e pour afficher des r√©sultats.
                                                                                                     """
def show_custom_messagebox(title, message):
    custom_messagebox = ctk.CTkToplevel(app)  # Nouvelle fen√™tre pour le message
    custom_messagebox.title(title)  # Titre de la fen√™tre
    
    # D√©finir la taille de la fen√™tre
    custom_messagebox.geometry("400x300")

    # Ajouter un label pour le message
    message_label = ctk.CTkLabel(custom_messagebox, text=message, font=('Segoe UI', 20))
    message_label.pack(padx=20, pady=20, expand=True)  # Utiliser expand pour centrer verticalement

    # Ajouter un bouton pour fermer la fen√™tre
    close_button = ctk.CTkButton(custom_messagebox, text="OK", command=custom_messagebox.destroy, font=('Mistral', 40), fg_color="black")
    close_button.pack(pady=20)  # Pady pour espacer le bouton


""" def create_manager_tabs() cr√©e les onglets pour l'interface utilisateur en fonction du r√¥le de l'utilisateur actuel.
                                                                                             """
def create_manager_tabs():
    tabview = ctk.CTkTabview(app)  # Cr√©e un nouvel onglet dans l'application
    tabview.pack(side="left", fill="both", expand=True)  # Ajoute l'onglet √† l'interface

    if current_user == "Papa Samba":  # V√©rifie si l'utilisateur est Papa Samba
        info_tab = tabview.add("Information")  # Ajoute un onglet pour les informations
        ctk.CTkLabel(info_tab, text="Vous avez un acc√®s limit√© √† cette application.", font=('Mistral', 40)).pack(pady=20)  # Affiche un message d'acc√®s limit√©
        search_tab = tabview.add("Rechercher une station")  # Ajoute un onglet pour rechercher une station
        create_search_tab_content(search_tab)  # Cr√©e le contenu de l'onglet de recherche

    elif current_user == "Moussa":  # V√©rifie si l'utilisateur est Moussa
        insert_tab = tabview.add("Ajouter une station")  # Ajoute un onglet pour ajouter une station
        create_insert_tab_content(insert_tab)  # Cr√©e le contenu de l'onglet d'insertion
        modify_tab = tabview.add("Modifier une station")  # Ajoute un onglet pour modifier une station
        create_modify_tab_content(modify_tab)  # Cr√©e le contenu de l'onglet de modification
        delete_tab = tabview.add("Supprimer une station")  # Ajoute un onglet pour supprimer une station
        create_delete_tab_content(delete_tab)  # Cr√©e le contenu de l'onglet de suppression
        search_tab = tabview.add("Rechercher une station")  # Ajoute un onglet pour rechercher une station
        create_search_tab_content(search_tab)  # Cr√©e le contenu de l'onglet de recherche

    elif current_user in ["Nogaye", "Mariama"]:  # V√©rifie si l'utilisateur est Nogaye ou Mariama
        insert_tab = tabview.add("Ajouter une station")  # Ajoute un onglet pour ajouter une station
        create_insert_tab_content(insert_tab)  # Cr√©e le contenu de l'onglet d'insertion
        delete_tab = tabview.add("Supprimer une station")  # Ajoute un onglet pour supprimer une station
        create_delete_tab_content(delete_tab)  # Cr√©e le contenu de l'onglet de suppression
        search_tab = tabview.add("Rechercher une station")  # Ajoute un onglet pour rechercher une station
        create_search_tab_content(search_tab)  # Cr√©e le contenu de l'onglet de recherche


""" def create_insert_tab_content cr√©e le contenu de l'onglet pour ajouter une station.
                                                                                       """
def create_insert_tab_content(tab):
    
    ctk.CTkLabel(tab, text="Nom :", font=('Segoe UI', 24)).grid(row=0, column=0, padx=10, pady=10)  # Label pour le nom
    nom_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nom
    nom_entry.grid(row=0, column=1)

    ctk.CTkLabel(tab, text="Capacit√© :", font=('Segoe UI', 24)).grid(row=1, column=0, padx=10, pady=10)  # Label pour la capacit√©
    capacite_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour la capacit√©
    capacite_entry.grid(row=1, column=1)

    ctk.CTkLabel(tab, text="Lieu :", font=('Segoe UI', 24)).grid(row=2, column=0, padx=10, pady=10)  # Label pour le lieu
    lieu_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le lieu
    lieu_entry.grid(row=2, column=1)

    ctk.CTkLabel(tab, text="R√©gion :", font=('Segoe UI', 24)).grid(row=3, column=0, padx=10, pady=10)  # Label pour la r√©gion
    region_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour la r√©gion
    region_entry.grid(row=3, column=1)

    ctk.CTkLabel(tab, text="Tarif :", font=('Segoe UI', 24)).grid(row=4, column=0, padx=10, pady=10)  # Label pour le tarif
    tarif_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le tarif
    tarif_entry.grid(row=4, column=1)
    
    """ def insert_data_callback(): callback pour ajouter une station. 
                                                                      """
    def insert_data_callback():
        nom = nom_entry.get()  # R√©cup√®re le nom
        capacite = capacite_entry.get()  # R√©cup√®re la capacit√©
        lieu = lieu_entry.get()  # R√©cup√®re le lieu
        region = region_entry.get()  # R√©cup√®re la r√©gion
        tarif = tarif_entry.get()  # R√©cup√®re le tarif
        message = insert_data(nom, capacite, lieu, region, tarif)  # Ajoute la station
        show_custom_messagebox("Ajout de Station", message)  # Affiche un message
        update_treeview(tree)  # Met √† jour l'affichage des stations

    # Bouton pour ajouter la station
    ctk.CTkButton(tab, text="Ajouter", command=insert_data_callback, fg_color="green", font=('Mistral', 40)).grid(row=5, column=0, columnspan=2, pady=10)

""" def create_modify_tab_content() cr√©e le contenu de l'onglet pour modifier une station.
                                                                                          """
def create_modify_tab_content(tab):
    ctk.CTkLabel(tab, text="Nom de la station √† modifier :", font=('Segoe UI', 24)).grid(row=0, column=0, padx=10, pady=10)  # Label pour le nom de la station √† modifier
    modify_nom_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nom
    modify_nom_entry.grid(row=0, column=1)

    ctk.CTkLabel(tab, text="Nouveau nom :", font=('Segoe UI', 24)).grid(row=1, column=0, padx=10, pady=10)  # Label pour le nouveau nom
    nouveau_nom_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nouveau nom
    nouveau_nom_entry.grid(row=1, column=1)

    ctk.CTkLabel(tab, text="Nouvelle capacit√© :", font=('Segoe UI', 24)).grid(row=2, column=0, padx=10, pady=10)  # Label pour la nouvelle capacit√©
    nouvelle_capacite_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour la nouvelle capacit√©
    nouvelle_capacite_entry.grid(row=2, column=1)

    ctk.CTkLabel(tab, text="Nouveau lieu :", font=('Segoe UI', 24)).grid(row=3, column=0, padx=10, pady=10)  # Label pour le nouveau lieu
    nouveau_lieu_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nouveau lieu
    nouveau_lieu_entry.grid(row=3, column=1)

    ctk.CTkLabel(tab, text="Nouvelle r√©gion :", font=('Segoe UI', 24)).grid(row=4, column=0, padx=10, pady=10)  # Label pour la nouvelle r√©gion
    nouvelle_region_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour la nouvelle r√©gion
    nouvelle_region_entry.grid(row=4, column=1)

    ctk.CTkLabel(tab, text="Nouveau tarif :", font=('Segoe UI', 24)).grid(row=5, column=0, padx=10, pady=10)  # Label pour le nouveau tarif
    nouveau_tarif_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nouveau tarif
    nouveau_tarif_entry.grid(row=5, column=1)
    
    """ def modify_data_callback(): callback pour modifier une station.
                                                                       """
    def modify_data_callback():
        nomStation = modify_nom_entry.get()  # R√©cup√®re le nom de la station √† modifier
        nouveau_nom = nouveau_nom_entry.get()  # R√©cup√®re le nouveau nom
        nouvelle_capacite = nouvelle_capacite_entry.get()  # R√©cup√®re la nouvelle capacit√©
        nouveau_lieu = nouveau_lieu_entry.get()  # R√©cup√®re le nouveau lieu
        nouvelle_region = nouvelle_region_entry.get()  # R√©cup√®re la nouvelle r√©gion
        nouveau_tarif = nouveau_tarif_entry.get()  # R√©cup√®re le nouveau tarif

        message = modify_data(nomStation, nouveau_nom, nouvelle_capacite, nouveau_lieu, nouvelle_region, nouveau_tarif)  # Modifie la station
        show_custom_messagebox("Modification de Station", message)  # Affiche un message
        update_treeview(tree)  # Met √† jour l'affichage des stations

    # Bouton pour modifier la station
    ctk.CTkButton(tab, text="Modifier", command=modify_data_callback, fg_color="blue", font=('Mistral', 40)).grid(row=6, column=0, columnspan=2, pady=10)

""" def create_delete_tab_content() cr√©e le contenu de l'onglet pour supprimer une station.
                                                                                           """
def create_delete_tab_content(tab):
    ctk.CTkLabel(tab, text="Nom de la station √† supprimer :", font=('Segoe UI', 24)).grid(row=0, column=0, padx=10, pady=10)  # Label pour le nom de la station √† supprimer
    delete_nom_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nom
    delete_nom_entry.grid(row=0, column=1)
    
    """ def delete_data_callback(): callback pour supprimer une station.
                                                                        """
    def delete_data_callback():
        nomStation = delete_nom_entry.get()  # R√©cup√®re le nom de la station √† supprimer
        message = delete_data(nomStation)  # Supprime la station
        show_custom_messagebox("Suppression de Station", message)  # Affiche un message
        update_treeview(tree)  # Met √† jour l'affichage des stations

    # Bouton pour supprimer la station
    ctk.CTkButton(tab, text="Supprimer", command=delete_data_callback, fg_color="red", font=('Mistral', 40)).grid(row=1, column=0, columnspan=2, pady=10)

""" def create_search_tab_content() cr√©e le contenu de l'onglet pour rechercher une station.
                                                                                            """
def create_search_tab_content(tab):
    ctk.CTkLabel(tab, text="Nom de la station √† rechercher :", font=('Segoe UI', 24)).grid(row=0, column=0, padx=10, pady=10)  # Label pour le nom de la station √† rechercher
    search_nom_entry = ctk.CTkEntry(tab, font=('Segoe UI', 24))  # Champ de saisie pour le nom
    search_nom_entry.grid(row=0, column=1)

    result_label = ctk.CTkLabel(tab, text="", font=('Segoe UI', 24))  # Label pour afficher le r√©sultat
    result_label.grid(row=2, column=0, columnspan=2, pady=10)
    
    """ def search_data_callback(): callback pour rechercher une station.
                                                                       """
    def search_data_callback():
        nomStation = search_nom_entry.get()  # R√©cup√®re le nom de la station √† rechercher
        rows = search_data()  # R√©cup√®re toutes les stations
        found = None  # Initialisation de la variable pour stocker la station trouv√©e
        
        for row in rows:
            if row.nomStation.lower() == nomStation.lower():  # Comparer sans tenir compte de la casse
                found = row  # Si trouv√©, stocke la station
                break  # Sort de la boucle

        if found:
            # Affiche toutes les donn√©es de la station trouv√©e
            message = (f"Station trouv√©e : {found.nomStation}\n"
                       f"Capacit√©: {found.capacit√©}\n"
                       f"Lieu: {found.lieu}\n"
                       f"R√©gion: {found.r√©gion}\n"
                       f"Tarif: {found.tarif}")
            show_custom_messagebox("R√©sultat de la recherche", message)  # Affiche le r√©sultat
        else:
            show_custom_messagebox("R√©sultat de la recherche", "Aucune station trouv√©e.")  # Affiche un message si rien trouv√©

    # Bouton pour lancer la recherche
    ctk.CTkButton(tab, text="Rechercher", command=search_data_callback, fg_color="chocolate", font=('Mistral', 40)).grid(row=1, column=0, columnspan=2, pady=10)

app.withdraw()  # Masque l'application principale
create_contact_window()  # Cr√©e la fen√™tre de contact
app.mainloop()  # D√©marre la boucle principale de l'application
